#include <iostream>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <algorithm>
#include <numeric>

using namespace std;

// Problem 1: MinStack
class MinStack {
private:
    stack<int> s;
    stack<int> minStack;

public:
    MinStack() {}

    void push(int val) {
        s.push(val);
        if (minStack.empty() || val <= minStack.top()) {
            minStack.push(val);
        }
    }

    void pop() {
        if (s.top() == minStack.top()) {
            minStack.pop();
        }
        s.pop();
    }

    int top() {
        return s.top();
    }

    int getMin() {
        return minStack.top();
    }
};

// Problem 2: Circular and Square Sandwiches
int countStudents(vector<int>& students, vector<int>& sandwiches) {
    queue<int> studentQueue;
    for (int student : students) {
        studentQueue.push(student);
    }

    int index = 0, rotations = 0;
    while (!studentQueue.empty() && rotations < studentQueue.size()) {
        if (studentQueue.front() == sandwiches[index]) {
            studentQueue.pop();
            index++;
            rotations = 0;
        } else {
            studentQueue.push(studentQueue.front());
            studentQueue.pop();
            rotations++;
        }
    }

    return studentQueue.size();
}

// Problem 3: Next Greater Element in Circular Array
vector<int> nextGreaterElements(vector<int>& nums) {
    int n = nums.size();
    vector<int> result(n, -1);
    stack<int> st;

    for (int i = 0; i < 2 * n; i++) {
        while (!st.empty() && nums[st.top()] < nums[i % n]) {
            result[st.top()] = nums[i % n];
            st.pop();
        }
        if (i < n) {
            st.push(i);
        }
    }

    return result;
}

// Problem 4: Sliding Window Maximum
vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> dq;
    vector<int> result;

    for (int i = 0; i < nums.size(); i++) {
        if (!dq.empty() && dq.front() == i - k) {
            dq.pop_front();
        }

        while (!dq.empty() && nums[dq.back()] < nums[i]) {
            dq.pop_back();
        }

        dq.push_back(i);

        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }

    return result;
}

// Problem 5: GCD Pairs Query
int gcd(int a, int b) {
    while (b) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

vector<int> gcdPairsQuery(vector<int>& nums, vector<int>& queries) {
    vector<int> gcdPairs;
    for (int i = 0; i < nums.size(); i++) {
        for (int j = i + 1; j < nums.size(); j++) {
            gcdPairs.push_back(gcd(nums[i], nums[j]));
        }
    }

    sort(gcdPairs.begin(), gcdPairs.end());
    vector<int> result;

    for (int query : queries) {
        result.push_back(gcdPairs[query]);
    }

    return result;
}

int main() {
    // Example for Problem 1
    MinStack minStack;
    minStack.push(-2);
    minStack.push(0);
    minStack.push(-3);
    cout << "Min: " << minStack.getMin() << endl;
    minStack.pop();
    cout << "Top: " << minStack.top() << endl;
    cout << "Min: " << minStack.getMin() << endl;

    // Example for Problem 2
    vector<int> students = {1, 1, 0, 0};
    vector<int> sandwiches = {0, 1, 0, 1};
    cout << "Students unable to eat: " << countStudents(students, sandwiches) << endl;

    // Example for Problem 3
    vector<int> nums = {1, 2, 1};
    vector<int> nextGreater = nextGreaterElements(nums);
    for (int val : nextGreater) {
        cout << val << " ";
    }
    cout << endl;

    // Example for Problem 4
    vector<int> numsSliding = {1, 3, -1, -3, 5, 3, 6, 7};
    int k = 3;
    vector<int> slidingMax = maxSlidingWindow(numsSliding, k);
    for (int val : slidingMax) {
        cout << val << " ";
    }
    cout << endl;

    // Example for Problem 5
    vector<int> numsGcd = {2, 3, 4, 6};
    vector<int> queries = {0, 1, 2};
    vector<int> gcdResults = gcdPairsQuery(numsGcd, queries);
    for (int val : gcdResults) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
